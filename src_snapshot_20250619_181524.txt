

============ FILE: app/candidates/page.tsx ============
"use client";
import React, { use, useEffect, useRef, useState } from "react";
import axios from "axios";
import SignHeader from "@/components/ui/signHeader";
import { showToast } from "../../pages/api/admin/showToast";
import toast from "react-hot-toast";

type Candidate = {
  candidateId: number;
  name: string;
  party: string;
  agenda: string;
};

export default function CandidateList() {
  const [candidates, setCandidates] = useState<Candidate[]>([]);
  const [loading, setLoading] = useState(true);
  const hasRun=useRef(false);

  useEffect(() => {
    if (hasRun.current) return; // Prevent multiple fetches
    hasRun.current = true; // Set the flag to true after the first run
    const fetchCandidates = async () => {
      const loadToastId = toast.loading("Fetching candidates...");

      try {
        const response = await axios.get("/api/admin/getCandidates");
        setCandidates(response.data.candidates || []);
        showToast("Candidates loaded", "success", loadToastId);
      } catch (error) {
        console.error("Error fetching candidates from API:", error);
        showToast("Error fetching candidates", "error", loadToastId);
      } finally {
        setLoading(false);
      }
    };

    fetchCandidates();
  }, []);

  return (
    <section className="bg-gray-950 text-white min-h-screen">
      <SignHeader />
      <div className="container mx-auto px-4 py-12">
        <h1 className="text-3xl font-bold text-center mb-8 text-transparent bg-clip-text bg-gradient-to-r from-indigo-500 to-indigo-200">
          Candidate List
        </h1>

        <div className="flex flex-col space-y-4">
          {candidates.map((candidate) => (
            <div
              key={candidate.candidateId}
              className="bg-gray-800 rounded-lg p-6 hover:bg-gray-700 transition"
            >
              <h2 className="text-xl font-semibold mb-2">{candidate.name}</h2>
              <p className="text-indigo-400 mb-1">Party: {candidate.party}</p>
              <p className="text-indigo-200 mb-4">"{candidate.agenda}"</p>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}


============ FILE: app/(default)/layout.tsx ============
"use client";

import { useEffect } from "react";

import AOS from "aos";
import "aos/dist/aos.css";

import Footer from "@/components/ui/footer";

export default function DefaultLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  useEffect(() => {
    AOS.init({
      once: true,
      disable: "phone",
      duration: 600,
      easing: "ease-out-sine",
    });
  });

  return (
    <>
      <main className="relative flex grow flex-col">{children}</main>

      {/* <Footer /> */}
    </>
  );
}


============ FILE: app/(default)/page.tsx ============
export const metadata = {
  title: "Home - Open PRO",
  description: "Page description",
};

import PageIllustration from "@/components/page-illustration";
import Hero from "@/components/hero-home";
import Workflows from "@/components/workflows";
import Features from "@/components/features";
import Testimonials from "@/components/testimonials";
import Cta from "@/components/cta";
import Footer from "@/components/ui/footer";

export default function Home() {
  return (
    <>
      {/* <PageIllustration /> */}
      {/* <Hero /> */}
      <Workflows />
      <Features />
      {/* <Testimonials /> */}
      <Cta />
       <Footer/>
    </>
  );
}


============ FILE: app/artifacts/votingArtifact.js ============
import Voting from "../../artifacts/contracts/Voting.sol/Voting.json";
import addressJson from "../../frontend/artifacts/deployedAddress.json";

export const votingAbi = Voting.abi;
export const votingAddress = addressJson.address;


============ FILE: app/admin_page/page.tsx ============
"use client";
import React, { useState } from "react";
import axios from "axios";
import { useRouter } from "next/navigation";
import AdminHeader from "@/components/ui/AdminHeader";
import { showToast } from "../../pages/api/admin/showToast";

export default function UploadLists() {
  const router = useRouter();
  const [voterFile, setVoterFile] = useState<File | null>(null);
  const [candidateFile, setCandidateFile] = useState<File | null>(null);
  const [message, setMessage] = useState<string | null>(null);
  const [loading, setLoading] = useState(false); // loader state

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>, type: "voter" | "candidate") => {
    const selectedFile = e.target.files ? e.target.files[0] : null;
    if (type === "voter") setVoterFile(selectedFile);
    else setCandidateFile(selectedFile);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setMessage(null);

    if (!voterFile || !candidateFile) {
      showToast("Please select both JSON files to upload.", "error");
      return;
    }

    setLoading(true);

    const formData = new FormData();
    formData.append("voterFile", voterFile);
    formData.append("candidateFile", candidateFile);

    try {
      const uploadRes = await axios.post("/api/admin/lists/upload", formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });

      showToast("Files uploaded successfully!", "success");

      const voterIpfsHash = uploadRes.data.data.voterFile.ipfsHash;
      const candidateIpfsHash = uploadRes.data.data.candidateFile.ipfsHash;

      await axios.post("/api/admin/processVoters", { ipfsHash: voterIpfsHash });
      await axios.post("/api/admin/processCandidates", { ipfsHash: candidateIpfsHash });

      showToast("Voter and Candidate files processed successfully!", "success");
      
    } catch (error: any) {
      if (error.response?.status === 401) {
        router.push("/admin");
        showToast("Session expired. Please log in again.", "error");
        return;
      }
      console.error("Upload error:", error);
      showToast("Error during upload or processing.", "error");
    } finally {
      setLoading(false);
    }
  };

  return (
    <section>
      <AdminHeader />
      <div className="mx-auto max-w-6xl px-4 sm:px-6">
        <div className="py-12 md:py-20">
          <div className="pb-12 text-center">
            <h1 className="text-3xl font-semibold text-indigo-600">Upload Voter & Candidate JSON Files</h1>
          </div>

          <form onSubmit={handleSubmit} className="mx-auto max-w-[400px] space-y-5">
            <div>
              <label className="block text-sm font-medium text-indigo-600">Select Voter JSON File</label>
              <input type="file" accept=".json" className="form-input w-full" onChange={(e) => handleFileChange(e, "voter")} required />
            </div>

            <div>
              <label className="block text-sm font-medium text-indigo-600">Select Candidate JSON File</label>
              <input type="file" accept=".json" className="form-input w-full" onChange={(e) => handleFileChange(e, "candidate")} required />
            </div>

            {loading && (
              <div className="flex items-center space-x-2 justify-center text-indigo-400">
                <div className="w-6 h-6 border-4 border-indigo-500 border-dashed rounded-full animate-spin" />
                <p className="text-sm font-medium">Processing files, please wait...</p>
              </div>
            )}

            {message && !loading && (
              <div className="mt-2 text-center text-sm text-green-600">{message}</div>
            )}

            <button
              type="submit"
              className="btn w-full bg-indigo-600 text-white hover:bg-indigo-700"
              disabled={loading}
            >
              {loading ? "Uploading..." : "Upload & Process Files"}
            </button>
          </form>
        </div>
      </div>
    </section>
  );
}


============ FILE: app/signinusers/page.tsx ============
"use client";

import React, { useEffect, useState, useRef, useTransition } from "react";
import { useRouter } from "next/navigation";
import Image from "next/image";
import WorflowImg01 from "@/public/images/workflow-01.png";
import WorflowImg02 from "@/public/images/workflow-02.png";
import WorflowImg03 from "@/public/images/workflow-03.png";
import Spotlight from "@/components/spotlight";
import VoterHeader from "@/components/ui/VoterHeader";
import axios from "axios";
import Features from "@/components/features";
import Cta from "@/components/cta";
import { showToast } from "../../pages/api/admin/showToast";

interface AdminInfo {
  name: string;
}

export default function SigninUsers() {
  const [signedIn, setSignedIn] = useState(false);
  const [userInfo, setUserInfo] = useState<AdminInfo | null>(null);
  const [loadingRoute, setLoadingRoute] = useState(false);
  const [isPending, startTransition] = useTransition(); // ⬅️ route transition tracking
  const router = useRouter();
  const hasRun = useRef(false);

  useEffect(() => {
    if (hasRun.current) return;
    hasRun.current = true;
    axios
      .get("/api/admin/me")
      .then((res) => {
        if (res.data.authenticated) {
          setSignedIn(true);
          setUserInfo({ name: res.data.name });
        }
      })
      .catch(() => {
        setSignedIn(false);
        setUserInfo(null);
      });
  }, []);

  const navigateTo = (path: string) => {
    if (signedIn) {
      setLoadingRoute(true);
      startTransition(() => {
        router.push(path); // ⬅️ triggers navigation within transition
      });
    } else {
      showToast("You must be signed in.", "error");
    }
  };

  return (
    <section className="relative">
      <VoterHeader />

      {(loadingRoute || isPending) && (
        <div className="absolute inset-0 bg-black bg-opacity-60 z-50 flex items-center justify-center">
          <div className="flex flex-col items-center space-y-2">
            <div className="w-10 h-10 border-4 border-indigo-500 border-dashed rounded-full animate-spin"></div>
            <p className="text-indigo-300 font-medium text-sm">Navigating...</p>
          </div>
        </div>
      )}

      <div className="mx-auto max-w-6xl px-4 sm:px-6">
        <div className="pb-12 md:pb-20">
          <div className="mx-auto max-w-3xl pb-12 text-center md:pb-20">
            <div className="inline-flex items-center gap-3 pb-3 before:h-px before:w-8 before:bg-gradient-to-r before:from-transparent before:to-indigo-200/50 after:h-px after:w-8 after:bg-gradient-to-l after:from-transparent after:to-indigo-200/50">
              <span className="inline-flex bg-gradient-to-r from-indigo-500 to-indigo-200 bg-clip-text text-transparent">
                Voting System
              </span>
            </div>
            <h2 className="animate-[gradient_6s_linear_infinite] bg-[linear-gradient(to_right,theme(colors.gray.200),theme(colors.indigo.200),theme(colors.gray.50),theme(colors.indigo.300),theme(colors.gray.200))] bg-[length:200%_auto] bg-clip-text pb-4 font-nacelle text-3xl font-semibold text-transparent md:text-4xl">
              Welcome{userInfo ? `, ${userInfo.name}` : "!"}
            </h2>
            <p className="text-lg text-indigo-200/65">
              "Hi, Voters! You can vote here securely and anonymously."
            </p>
          </div>

          <Spotlight className="group mx-auto grid max-w-sm items-start gap-6 lg:max-w-none lg:grid-cols-3">
            <div
              onClick={() => navigateTo("/candidates")}
              className="group/card relative h-full overflow-hidden rounded-2xl bg-gray-800 p-px cursor-pointer"
            >
              <div className="relative z-20 h-full overflow-hidden rounded-[inherit] bg-gray-950">
                <Image src={WorflowImg01} width={350} height={288} alt="Candidates" />
                <div className="p-6">
                  <div className="mb-3">
                    <span className="btn-sm rounded-full bg-gray-800/40 px-2.5 py-0.5 text-xs font-normal">
                      <span className="bg-gradient-to-r from-indigo-500 to-indigo-200 bg-clip-text text-transparent">
                        Candidates List
                      </span>
                    </span>
                  </div>
                  <p className="text-indigo-200/65">
                    See the list of candidates and their manifestos.
                  </p>
                </div>
              </div>
            </div>

            <div
              onClick={() => navigateTo("/voter")}
              className="group/card relative h-full overflow-hidden rounded-2xl bg-gray-800 p-px cursor-pointer"
            >
              <div className="relative z-20 h-full overflow-hidden rounded-[inherit] bg-gray-950">
                <Image src={WorflowImg02} width={350} height={288} alt="Voting" />
                <div className="p-6">
                  <div className="mb-3">
                    <span className="btn-sm rounded-full bg-gray-800/40 px-2.5 py-0.5 text-xs font-normal">
                      <span className="bg-gradient-to-r from-indigo-500 to-indigo-200 bg-clip-text text-transparent">
                        Vote Securely!
                      </span>
                    </span>
                  </div>
                  <p className="text-indigo-200/65">
                    Give your vote to your favorite candidate.
                  </p>
                </div>
              </div>
            </div>

            <div
              onClick={() => navigateTo("/results")}
              className="group/card relative h-full overflow-hidden rounded-2xl bg-gray-800 p-px cursor-pointer"
            >
              <div className="relative z-20 h-full overflow-hidden rounded-[inherit] bg-gray-950">
                <Image src={WorflowImg03} width={350} height={288} alt="Results" />
                <div className="p-6">
                  <div className="mb-3">
                    <span className="btn-sm rounded-full bg-gray-800/40 px-2.5 py-0.5 text-xs font-normal">
                      <span className="bg-gradient-to-r from-indigo-500 to-indigo-200 bg-clip-text text-transparent">
                        Results!
                      </span>
                    </span>
                  </div>
                  <p className="text-indigo-200/65">
                    View the election results here.
                  </p>
                </div>
              </div>
            </div>
          </Spotlight>
        </div>
      </div>

      <Features />
      <Cta />
    </section>
  );
}


============ FILE: app/voter/page.tsx ============
"use client";

import React, { useEffect, useRef, useState } from "react";
const Web3 = require("web3");
const contract = require("@truffle/contract");
import axios from "axios";
import artifact from "../../build/contracts/Voting.json";
import SignHeader from "@/components/ui/signHeader";
import toast from "react-hot-toast";
import { showToast, showToastPromise } from "../../pages/api/admin/showToast";

interface Candidate {
  candidateId: number;
  name: string;
  slogan: string;
  votes: number;
}

export default function VotingPage() {
  const [candidates, setCandidates] = useState<Candidate[]>([]);
  const [selectedCandidate, setSelectedCandidate] = useState<number | null>(null);
  const [voterDetails, setVoterDetails] = useState({
    rollNumber: "",
    accountnumber: "",
    name: "",
    phoneNumber: "",
  });
  const [candidatesLoaded, setCandidatesLoaded] = useState(false);
    const hasRun=useRef(false);

  useEffect(() => {
    const fetchVoter = async () => {
      try {
        const res = await axios.get("/api/admin/me");
        if (res.data.authenticated) {
          setVoterDetails((prev) => ({
            ...prev,
            phoneNumber: res.data.phoneNumber,
            name: res.data.name,
            accountnumber: res.data.accountNumber,
          }));
        } else {
          showToast("You must be signed in to access this page.", "error");
        }
      } catch {
        showToast("Error fetching voter session.", "error");
      }
    };

    fetchVoter();
  }, []);

  useEffect(() => {
     if (hasRun.current) return; 
    hasRun.current = true; 
    if (candidatesLoaded) return;

    const fetchCandidates = async () => {
      const toastId = toast.loading("Fetching candidates...");
      try {
        const res = await axios.get("/api/admin/getCandidates");
        if (res.data.success) {
          const formatted = res.data.candidates.map((c: any, i: number) => ({
            candidateId: i + 1,
            name: c.name,
            slogan: c.agenda || c.slogan || "",
            votes: 0,
          }));
          setCandidates(formatted);
          toast.dismiss(toastId);
          showToast("Candidates loaded", "success");
          setCandidatesLoaded(true);
        } else {
          toast.dismiss(toastId);
          showToast("Failed to load candidates", "error");
        }
      } catch {
        toast.dismiss(toastId);
        showToast("Error loading candidate list.", "error");
      }
    };

    fetchCandidates();
  }, [candidatesLoaded]);

  const getContractInstance = async () => {
    const provider =
      typeof window !== "undefined" && (window as any).ethereum
        ? new Web3((window as any).ethereum)
        : new Web3.providers.HttpProvider("http://127.0.0.1:8545");

    const web3 = new Web3(provider);
    const Voting = contract(artifact);
    Voting.setProvider(provider);

    if (typeof Voting.currentProvider.sendAsync !== "function") {
      Voting.currentProvider.sendAsync = function (...args: any[]) {
        return Voting.currentProvider.send.apply(Voting.currentProvider, args);
      };
    }

    const accounts = await web3.eth.getAccounts();
    const instance = await Voting.deployed();
    return { voting: instance, account: accounts[0] };
  };

  const handleRegister = async () => {
    const { name, phoneNumber, rollNumber, accountnumber } = voterDetails;

    if (!name || !phoneNumber || !rollNumber || !accountnumber) {
      showToast("Please fill all voter details.", "error");
      return;
    }

    const verifyPromise = (async () => {
      const { voting, account } = await getContractInstance();
      await voting.verifyVoter(accountnumber, rollNumber, { from: account });
    })();

    showToastPromise(verifyPromise, {
      loading: "Verifying voter...",
      success: "Voter verified!",
      error: (err) => {
        const message = err?.message || "";
        if (message.includes("not verified")) return "You are not a verified voter.";
        if (message.includes("Invalid account")) return "Invalid account address.";
        if (message.includes("Invalid roll number")) return "Invalid roll number.";
        return "Verification failed.";
      },
    });
  };

  const handleVote = async () => {
    if (selectedCandidate === null) {
      showToast("Please select a candidate.", "error");
      return;
    }

    const votePromise = (async () => {
      const { voting } = await getContractInstance();
      const candidateIndex = selectedCandidate - 1;
      await voting.vote(candidateIndex, { from: voterDetails.accountnumber });
    })();

    showToastPromise(votePromise, {
      loading: "Casting your vote...",
      success: `Vote cast successfully for candidate ID ${selectedCandidate}`,
      error: (err) => {
        const message = err?.message || "";
        if (message.includes("Not verified")) return "You are not a verified voter.";
        if (message.includes("Already voted")) return "You have already voted.";
        if (message.includes("Invalid candidate")) return "Invalid candidate selected.";
        if (message.includes("Vote limit reached")) return "Vote limit reached.";
        if (message.includes("Voting is not active")) return "Voting has ended.";
        if (message.includes("Voter not registered")) return "You are not registered to vote.";
        if (message.includes("Invalid account")) return "Invalid account address.";
        return "Voting failed.";
      },
    });
  };

  return (
    <section className="bg-gray-950 text-white min-h-screen">
      <SignHeader />
      <div className="container mx-auto px-4 py-12">
        <h1 className="text-3xl font-bold text-center mb-8 text-transparent bg-clip-text bg-gradient-to-r from-indigo-500 to-indigo-200">
          Cast Your Vote
        </h1>

        <div className="max-w-md mx-auto bg-gray-800 p-6 rounded-lg mb-8">
          <h2 className="text-xl font-semibold mb-4">Voter Registration</h2>
          <input
            type="text"
            placeholder="Roll Number"
            value={voterDetails.rollNumber}
            onChange={(e) => setVoterDetails({ ...voterDetails, rollNumber: e.target.value })}
            className="w-full mb-4 p-2 bg-gray-700 rounded"
          />
          <button
            className="w-full bg-indigo-600 text-white py-2 rounded hover:bg-indigo-700"
            onClick={handleRegister}
          >
            Verify Voter
          </button>
        </div>

        <div className="grid md:grid-cols-3 gap-6">
          {candidates.map((candidate) => (
            <div
              key={candidate.candidateId}
              onClick={() => setSelectedCandidate(candidate.candidateId)}
              className={`bg-gray-800 rounded-lg p-6 cursor-pointer transition ${
                selectedCandidate === candidate.candidateId
                  ? "border-4 border-indigo-600"
                  : "hover:bg-gray-700"
              }`}
            >
              <h2 className="text-xl font-semibold mb-2">{candidate.name}</h2>
              <p className="text-indigo-200 mb-4">"{candidate.slogan}"</p>
            </div>
          ))}
        </div>

        <div className="flex justify-center mt-8">
          <button
            onClick={handleVote}
            disabled={!selectedCandidate}
            className={`px-6 py-3 rounded text-white ${
              selectedCandidate ? "bg-indigo-600 hover:bg-indigo-700" : "bg-gray-600 cursor-not-allowed"
            }`}
          >
            Submit Vote
          </button>
        </div>
      </div>
    </section>
  );
}


============ FILE: app/results/page.tsx ============
"use client";
import React, { useEffect, useRef, useState } from "react";
import Web3 from "web3";
import SignHeader from "@/components/ui/signHeader";
import artifact from "../../build/contracts/Voting.json";
import { showToast } from "../../pages/api/admin/showToast";
import { motion } from "framer-motion";
const contract = require("@truffle/contract");

interface Candidate {
  candidateId: number;
  name: string;
  slogan: string;
  votes: number;
}

function formatSecondsToHHMMSS(seconds: number) {
  const h = Math.floor(seconds / 3600);
  const m = Math.floor((seconds % 3600) / 60);
  const s = Math.floor(seconds % 60);
  return [h, m, s]
    .map((val) => val.toString().padStart(2, "0"))
    .join(":");
}

export default function ResultsPage() {
  const [candidates, setCandidates] = useState<Candidate[]>([]);
  const [winner, setWinner] = useState<{
    name: string;
    votes: number;
    candidateId: number;
  } | null>(null);
  const [totalVotes, setTotalVotes] = useState(0);
  const [loading, setLoading] = useState(true);
  const [loadingMessageIndex, setLoadingMessageIndex] = useState(0);
  const [timeLeftPercent, setTimeLeftPercent] = useState(100);
  const [timeLeftSeconds, setTimeLeftSeconds] = useState<number | null>(null);
  const hasRun = useRef(false);
  const votingEndRef = useRef<number | null>(null);
  const startTimeRef = useRef<number | null>(null);

  const loadingMessages = [
    "Counting votes securely...",
    "Waiting for voting period to end...",
    "Analyzing voter data...",
    "Tallying the results...",
   
  ];

  useEffect(() => {
    const interval = setInterval(() => {
      setLoadingMessageIndex((prev) => (prev + 1) % loadingMessages.length);
    }, 3000);
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    if (hasRun.current) return;
    hasRun.current = true;

    const fetchResults = async () => {
      const toastId = window.crypto.randomUUID();
      // showToast("Waiting for election results...", "success", toastId);

      try {
        const provider = new Web3.providers.HttpProvider("http://127.0.0.1:8545");
        const web3 = new Web3(provider);
        const Voting = contract(artifact);
        Voting.setProvider(provider);

        if (typeof Voting.currentProvider.sendAsync !== "function") {
          Voting.currentProvider.sendAsync = function () {
            return Voting.currentProvider.send.apply(Voting.currentProvider, arguments);
          };
        }

        const accounts = await web3.eth.getAccounts();
        const admin = accounts[0];
        const voting = await Voting.deployed();

        const votingEnd = (await voting.votingEnd()).toNumber();
        votingEndRef.current = votingEnd;

        const latestBlock = await web3.eth.getBlock("latest");
        const now = Number(latestBlock.timestamp);
        startTimeRef.current = now;

        const updateProgressBar = async () => {
          const currentBlock = await web3.eth.getBlock("latest");
          const currentTime = Number(currentBlock.timestamp);
          const totalDuration = votingEndRef.current! - startTimeRef.current!;
          const elapsed = currentTime - startTimeRef.current!;
          const timeLeft = votingEndRef.current! - currentTime;

          if (elapsed >= totalDuration) {
            setTimeLeftPercent(0);
            setTimeLeftSeconds(0);
            return false;
          }

          const percent = Math.max(0, 100 - (elapsed / totalDuration) * 100);
          setTimeLeftPercent(percent);
          setTimeLeftSeconds(timeLeft);
          return true;
        };

        const interval = setInterval(async () => {
          const shouldContinue = await updateProgressBar();
          if (!shouldContinue) {
            clearInterval(interval);
          }
        }, 1000);

        const waitUntilVotingEnds = async () => {
          while (true) {
            const latestBlock = await web3.eth.getBlock("latest");
            const now = latestBlock.timestamp;
            if (Number(now) >= votingEndRef.current!) break;

            await web3.eth.sendTransaction({ from: admin, to: admin, value: 0 });
            await new Promise((res) => setTimeout(res, 3000));
          }
        };

        await waitUntilVotingEnds();
        clearInterval(interval);

        await voting.endElection({ from: admin });
        const result = await voting.declareWinner({ from: admin });

        const winnerId = result[0].toNumber();
        const winnerName = result[1];
        const maxVotes = result[2].toNumber();
        setWinner({ candidateId: winnerId, name: winnerName, votes: maxVotes });

        const candidateCount = (await voting.candidateCount()).toNumber();
        let total = 0;
        const fetchedCandidates: Candidate[] = [];

        for (let i = 0; i < candidateCount; i++) {
          const c = await voting.Candidates(i);
          const votes = c.votes.toNumber();
          fetchedCandidates.push({
            candidateId: i + 1,
            name: c.name,
            slogan: c.slogan,
            votes,
          });
          total += votes;
        }

        fetchedCandidates.sort((a, b) => b.votes - a.votes);
        setCandidates(fetchedCandidates);
        setTotalVotes(total);

        // showToast("Election results loaded", "success", toastId);
      } catch (error) {
        console.error("Error fetching results:", error);
        showToast("Error fetching election results", "error", toastId);
      } finally {
        setLoading(false);
      }
    };

    fetchResults();
  }, []);

  return (
    <section className="bg-gray-950 text-white min-h-screen">
      <SignHeader />
      <div className="container mx-auto px-4 py-12">
        <h1 className="text-3xl font-bold text-center mb-8 text-transparent bg-clip-text bg-gradient-to-r from-indigo-500 to-indigo-200">
          Election Results
        </h1>

        {loading && (
          <div className="flex flex-col items-center justify-center py-8 space-y-4 w-full">
            <div className="w-full max-w-xl">
              <p className="text-indigo-300 text-sm mb-1">
                Voting ends in{" "}
                {timeLeftSeconds !== null
                  ? formatSecondsToHHMMSS(timeLeftSeconds)
                  : "..."}
              </p>
              <div className="w-full bg-gray-700 h-4 rounded-full">
                <div
                  className="bg-indigo-500 h-4 rounded-full transition-all duration-500"
                  style={{ width: `${timeLeftPercent}%` }}
                ></div>
              </div>
            </div>

            <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-indigo-500"></div>
            <p className="text-indigo-300 text-lg font-semibold">
              {loadingMessages[loadingMessageIndex]}
            </p>
            <p className="text-sm text-indigo-200">
              Please wait while we tally the votes...
            </p>
          </div>
        )}

        {!winner && !loading && (
          <div className="flex justify-center items-center py-16">
            <div className="text-center">
              <h2 className="text-2xl font-semibold text-indigo-400 mb-4">
                No results available.
              </h2>
              <p className="text-indigo-200">Please check back later.</p>
            </div>
          </div>
        )}

        {winner && !loading && (
          <>
            <motion.div
              initial={{ opacity: 0, y: -30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              className="max-w-xl mx-auto bg-gray-800 rounded-lg p-6 mb-8 text-center shadow-lg"
            >
              <h2 className="text-2xl font-bold mb-4">Winner</h2>
              <div className="bg-gradient-to-r from-indigo-600 to-indigo-400 p-4 rounded-lg">
                <h3 className="text-xl font-semibold">{winner.name}</h3>
                <p className="text-white/80">Candidate ID: {winner.candidateId}</p>
                <p className="text-lg mt-2">Votes: {winner.votes}</p>
              </div>
            </motion.div>

            <div className="grid md:grid-cols-3 gap-6">
              {candidates.map((candidate, index) => (
                <div
                  key={candidate.candidateId}
                  className={`bg-gray-800 rounded-lg p-6 ${
                    index === 0 ? "border-4 border-indigo-600" : ""
                  }`}
                >
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold">{candidate.name}</h2>
                    <span className="text-lg font-bold text-indigo-400">
                      {totalVotes
                        ? ((candidate.votes / totalVotes) * 100).toFixed(1)
                        : "0"}
                      %
                    </span>
                  </div>
                  <div className="w-full bg-gray-700 rounded-full h-4 mb-2">
                    <div
                      className="bg-indigo-600 h-4 rounded-full"
                      style={{
                        width: `${
                          totalVotes
                            ? ((candidate.votes / totalVotes) * 100).toFixed(1)
                            : 0
                        }%`,
                      }}
                    />
                  </div>
                  <p className="text-indigo-200">{candidate.votes} Total Votes</p>
                </div>
              ))}
            </div>

            <div className="text-center mt-8">
              <p className="text-xl">
                Total Votes Cast:{" "}
                <span className="font-bold text-indigo-400">{totalVotes}</span>
              </p>
            </div>
          </>
        )}
      </div>
    </section>
  );
}


============ FILE: app/layout.tsx ============
import "./css/style.css";

import { Inter } from "next/font/google";
import localFont from "next/font/local";
import { Toaster } from "sonner";

import React from "react";

import Header from "@/components/ui/header";
import ToastProvider from "@/components/ui/ToastProvider";

const inter = Inter({
  subsets: ["latin"],
  variable: "--font-inter",
  display: "swap",
});

const nacelle = localFont({
  src: [
    {
      path: "../public/fonts/nacelle-regular.woff2",
      weight: "400",
      style: "normal",
    },
    {
      path: "../public/fonts/nacelle-italic.woff2",
      weight: "400",
      style: "italic",
    },
    {
      path: "../public/fonts/nacelle-semibold.woff2",
      weight: "600",
      style: "normal",
    },
    {
      path: "../public/fonts/nacelle-semibolditalic.woff2",
      weight: "600",
      style: "italic",
    },
  ],
  variable: "--font-nacelle",
  display: "swap",
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    
  
    <html lang="en">
      <body
        className={`${inter.variable} ${nacelle.variable} bg-gray-950 font-inter text-base text-gray-200 antialiased`}
      >
        <div className="flex min-h-screen flex-col overflow-hidden supports-[overflow:clip]:overflow-clip">
      <ToastProvider />

          {children}
        </div>
      </body>
    </html>
  );
}


============ FILE: app/(auth)/admin/page.tsx ============
"use client";

import React, { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import axios from "axios";
import SignHeader from "@/components/ui/signHeader";
import { showToast } from "../../../pages/api/admin/showToast";

export default function SignIn() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [loading, setLoading] = useState(false); // loader state
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErrorMessage(null);
    setLoading(true); // start loading

    try {
      const response = await axios.post("/api/admin/login", { email, password });
      
      if (response.status === 200) {
        showToast("Login successful!", "success");
        router.push("/admin_page");
      } else {
        showToast("Login failed. Please check your credentials.", "error");
      }
    } catch (error) {
      if (axios.isAxiosError(error) && error.response?.status === 401) {
        showToast("Unauthorized access. Please check your credentials.", "error");
      } else {
        showToast("Login failed. Try again.", "error");
      }
    } finally {
      setLoading(false); // stop loading
    }
  };

  return (
    <section>
      <SignHeader />
      <div className="mx-auto max-w-6xl px-4 sm:px-6">
        <div className="py-12 md:py-20">
          <div className="pb-12 text-center">
            <h1 className="animate-[gradient_6s_linear_infinite] bg-[linear-gradient(to_right,theme(colors.gray.200),theme(colors.indigo.200),theme(colors.gray.50),theme(colors.indigo.300),theme(colors.gray.200))] bg-[length:200%_auto] bg-clip-text font-nacelle text-3xl font-semibold text-transparent md:text-4xl">
              Admin Sign In
            </h1>
          </div>

          <form onSubmit={handleSubmit} className="mx-auto max-w-[400px] space-y-5">
            <div>
              <label className="mb-1 block text-sm font-medium text-indigo-200/65" htmlFor="email">
                Email
              </label>
              <input
                id="email"
                type="email"
                className="form-input w-full"
                placeholder="Your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                disabled={loading}
              />
            </div>

            <div>
              <div className="mb-1 flex items-center justify-between gap-3">
                <label className="block text-sm font-medium text-indigo-200/65" htmlFor="password">
                  Password
                </label>
                <Link className="text-sm text-gray-600 hover:underline" href="/reset-password">
                  Forgot?
                </Link>
              </div>
              <input
                id="password"
                type="password"
                className="form-input w-full"
                placeholder="Your password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                disabled={loading}
              />
            </div>

            {errorMessage && (
              <div className="mt-2 text-center text-sm text-red-600">{errorMessage}</div>
            )}

            {loading && (
              <div className="flex items-center justify-center space-x-2 text-indigo-400">
                <div className="w-5 h-5 border-4 border-indigo-500 border-dashed rounded-full animate-spin"></div>
                <p className="text-sm font-medium">Logging in…</p>
              </div>
            )}

            <div className="mt-6 space-y-5">
              <button
                type="submit"
                className="btn w-full bg-gradient-to-t from-indigo-600 to-indigo-500 text-white hover:bg-indigo-700"
                disabled={loading}
              >
                {loading ? "Please wait..." : "Sign In"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </section>
  );
}


============ FILE: app/(auth)/signin/page.tsx ============
"use client";

import React, { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import axios from "axios";
import SignHeader from "@/components/ui/signHeader";
import { showToast } from "../../../pages/api/admin/showToast";

export default function SignIn() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false); // 👈 show/hide state
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErrorMessage(null);
    setLoading(true);

    try {
      const response = await axios.post("/api/admin/signin", { email, password });

      if (response.data.success) {
        if (response.data.mustChangePassword) {
          localStorage.setItem("voterId", response.data.voterId);
          router.push("/change-password");
        } else {
          router.push("/signinusers");
        }
      } else {
        showToast("Invalid email or password", "error");
      }
    } catch (error) {
      if (axios.isAxiosError(error) && error.response?.status === 401) {
        showToast("Unauthorized access. Please check your credentials.", "error");
      } else {
        showToast("Login failed. Try again later.", "error");
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <section>
      <SignHeader />
      <div className="mx-auto max-w-6xl px-4 sm:px-6">
        <div className="py-12 md:py-20">
          <div className="pb-12 text-center">
            <h1 className="animate-[gradient_6s_linear_infinite] bg-[linear-gradient(to_right,theme(colors.gray.200),theme(colors.indigo.200),theme(colors.gray.50),theme(colors.indigo.300),theme(colors.gray.200))] bg-[length:200%_auto] bg-clip-text font-nacelle text-3xl font-semibold text-transparent md:text-4xl">
              Voter Sign In
            </h1>
          </div>

          <form onSubmit={handleSubmit} className="mx-auto max-w-[400px] space-y-5">
            <div>
              <label className="mb-1 block text-sm font-medium text-indigo-200/65" htmlFor="email">
                Email
              </label>
              <input
                id="email"
                type="email"
                className="form-input w-full"
                placeholder="Your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                disabled={loading}
              />
            </div>

            <div>
              <div className="mb-1 flex items-center justify-between gap-3">
                <label className="block text-sm font-medium text-indigo-200/65" htmlFor="password">
                  Password
                </label>
              </div>
              <div className="relative">
                <input
                  id="password"
                  type={showPassword ? "text" : "password"} // 👈 toggle type
                  className="form-input w-full pr-16"
                  placeholder="Your password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                  disabled={loading}
                />
                <button
                  type="button"
                  onClick={() => setShowPassword((prev) => !prev)} // 👈 toggle show/hide
                  className="absolute top-1/2 right-3 -translate-y-1/2 text-sm text-indigo-400 hover:text-indigo-300"
                  disabled={loading}
                >
                  {showPassword ? "Hide" : "Show"}
                </button>
              </div>
            </div>

            {errorMessage && (
              <div className="mt-2 text-center text-sm text-red-600">{errorMessage}</div>
            )}

            {loading && (
              <div className="flex items-center justify-center space-x-2 text-indigo-400">
                <div className="w-5 h-5 border-4 border-indigo-500 border-dashed rounded-full animate-spin"></div>
                <p className="text-sm font-medium">Signing in…</p>
              </div>
            )}

            <div className="mt-6 space-y-5">
              <button
                type="submit"
                className="btn w-full bg-gradient-to-t from-indigo-600 to-indigo-500 text-white hover:bg-indigo-700"
                disabled={loading}
              >
                {loading ? "Please wait..." : "Sign In"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </section>
  );
}


============ FILE: app/(auth)/layout.tsx ============
import PageIllustration from "@/components/page-illustration";

export default function AuthLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <main className="relative flex grow flex-col">
      <PageIllustration multiple />

      {children}
    </main>
  );
}


============ FILE: app/(auth)/change-password/page.tsx ============
"use client";
import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import axios from "axios";
import { showToast } from "../../../pages/api/admin/showToast";
import { Eye, EyeOff } from "lucide-react";

export default function ChangePassword() {
  const router = useRouter();

  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [showNew, setShowNew] = useState(false);
  const [showConfirm, setShowConfirm] = useState(false);
  const [error, setError] = useState("");
  const [strength, setStrength] = useState<"weak" | "medium" | "strong" | "">("");

  const debounceTimeout = useRef<NodeJS.Timeout | null>(null);
  const lastStrength = useRef<string>("");

  const evaluateStrength = (password: string): "weak" | "medium" | "strong" | "" => {
    if (!password) return "";
    const strongRegex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    const mediumRegex = /^((?=.*[A-Z])(?=.*[a-z])(?=.*\d)|(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&]))[A-Za-z\d@$!%*?&]{6,}$/;
    if (strongRegex.test(password)) return "strong";
    if (mediumRegex.test(password)) return "medium";
    return "weak";
  };

  const getStrengthColor = () => {
    switch (strength) {
      case "weak":
        return "bg-red-500 w-1/3";
      case "medium":
        return "bg-yellow-500 w-2/3";
      case "strong":
        return "bg-green-500 w-full";
      default:
        return "bg-gray-700 w-0";
    }
  };

  const validatePassword = (password: string) => {
    const strongRegex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    return strongRegex.test(password);
  };

  // Debounced password strength evaluation
  useEffect(() => {
    if (debounceTimeout.current) clearTimeout(debounceTimeout.current);
    if (!newPassword) {
      setStrength("");
      return;
    }
    debounceTimeout.current = setTimeout(() => {
      const currentStrength = evaluateStrength(newPassword);
      setStrength(currentStrength);

      if (currentStrength !== lastStrength.current) {
        lastStrength.current = currentStrength;
        if (currentStrength === "weak") showToast("Weak password", "error");
        else if (currentStrength === "medium") showToast("Medium strength password", "error");
        else if (currentStrength === "strong") showToast("Strong password 💪", "success");
      }
    }, 300); // 300ms debounce
  }, [newPassword]);

  const handleChange = async (e: React.FormEvent) => {
    e.preventDefault();
    const voterId = localStorage.getItem("voterId");

    if (!voterId) {
      showToast("No Voter ID found. Please log in again.", "error");
      return;
    }

    if (!validatePassword(newPassword)) {
      setError("Password must be at least 8 characters long and include uppercase, lowercase, number, and special character.");
      return;
    }

    if (newPassword !== confirmPassword) {
      setError("Passwords do not match.");
      return;
    }

    try {
      await axios.post("/api/admin/change-password", { voterId, newPassword });
      localStorage.removeItem("voterId");
      showToast("Password updated successfully.", "success");
      router.push("/signinusers");
    } catch (error) {
      showToast("Error updating password. Please try again.", "error");
      console.error("Error updating password", error);
    }
  };

  const inputStyles =
    "w-full mb-2 text-black p-2 rounded pr-10 focus:outline-none focus:ring-2 focus:ring-indigo-500";

  return (
    <section className="min-h-screen flex items-center justify-center bg-gray-900 text-white px-4">
      <form onSubmit={handleChange} className="bg-gray-800 p-8 rounded-xl shadow-lg max-w-md w-full">
        <h2 className="text-2xl font-bold mb-6 text-center">Change Your Password</h2>

        {/* New Password Field */}
        <div className="relative mb-2">
          <input
            type={showNew ? "text" : "password"}
            className={inputStyles}
            placeholder="New Password"
            value={newPassword}
            onChange={(e) => {
              setNewPassword(e.target.value);
              setError("");
            }}
            required
          />
          <button
            type="button"
            className="absolute top-2 right-3 text-gray-600 hover:text-white"
            onClick={() => setShowNew(!showNew)}
          >
            {showNew ? <EyeOff size={20} /> : <Eye size={20} />}
          </button>
        </div>

        {/* Strength Bar */}
        <div className="h-2 bg-gray-700 rounded mb-2 overflow-hidden">
          <div className={`h-full ${getStrengthColor()} transition-all duration-300`}></div>
        </div>

        {/* Confirm Password Field */}
        <div className="relative mb-2">
          <input
            type={showConfirm ? "text" : "password"}
            className={inputStyles}
            placeholder="Confirm Password"
            value={confirmPassword}
            onChange={(e) => {
              setConfirmPassword(e.target.value);
              setError("");
            }}
            required
          />
          <button
            type="button"
            className="absolute top-2 right-3 text-gray-600 hover:text-white"
            onClick={() => setShowConfirm(!showConfirm)}
          >
            {showConfirm ? <EyeOff size={20} /> : <Eye size={20} />}
          </button>
        </div>

        {/* Match Indicator */}
        {confirmPassword.length > 0 && (
          <p className={`text-sm mb-2 ${newPassword === confirmPassword ? "text-green-400" : "text-red-400"}`}>
            {newPassword === confirmPassword ? "✅ Passwords match" : "❌ Passwords do not match"}
          </p>
        )}

        {/* Helper Text */}
        <p className="text-sm text-gray-400 mb-3">
          Must be at least 8 characters and include uppercase, lowercase, number, and special character.
        </p>

        {/* Error Message */}
        {error && <p className="text-red-500 text-sm mb-2">{error}</p>}

        <button
          type="submit"
          className="w-full bg-indigo-600 hover:bg-indigo-700 text-white py-2 rounded transition"
        >
          Update Password
        </button>
      </form>
    </section>
  );
}


============ FILE: pages/api/admin/change-password.ts ============
import connectToDatabase from "../../../lib/mongodb";
import voter from "../../../models/Voter";
import bcrypt from "bcryptjs";

import type { NextApiRequest, NextApiResponse } from "next";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  await connectToDatabase();
  const { voterId, newPassword } = req.body;

  const hashed = await bcrypt.hash(newPassword, 10);

  await voter.findByIdAndUpdate(voterId, {
    passwordHash: hashed,
    mustChangePassword: false,
  });

  return res.status(200).json({ success: true });
}


============ FILE: pages/api/admin/showToast.ts ============
import toast from "react-hot-toast";

/**
 * Shows a simple toast notification.
 */
export const showToast = (message: string, type: "success" | "error", id?: string) => {
  if (id) toast.dismiss(id);
  else toast.dismiss();

  if (type === "success") {
    toast.success(message, { id });
  } else {
    toast.error(message, { id });
  }
};

/**
 * Shows a toast for a promise-based async operation.
 * Automatically dismisses existing toasts before showing new ones.
 */
export const showToastPromise = (
  promise: Promise<any>,
  messages: {
    loading: string;
    success: string;
    error: string | ((err: any) => string);
  }
) => {
  toast.dismiss(); // dismiss all previous toasts before showing this one

  return toast.promise(promise, {
    loading: messages.loading,
    success: messages.success,
    error: (err) => {
      if (typeof messages.error === "function") return messages.error(err);
      return messages.error;
    },
  });
};


============ FILE: pages/api/admin/login.ts ============
import connectToDatabase from "@/lib/mongodb";
import Admin from "@/models/Admin";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import { serialize } from "cookie";
import type { NextApiRequest, NextApiResponse } from "next";

// Update in Production
const JWT_SECRET =  "All Is Well"; 

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") return res.status(405).json({ message: "Method not allowed" });
   //  Check content-type before parsing body
  if (req.headers["content-type"] !== "application/json") {
    return res.status(400).json({ success: false, message: "Expected application/json" });
  }


  const { email, password } = req.body;

  try {
    await connectToDatabase();
    const admin = await Admin.findOne({ email });
    if (!admin || !(await bcrypt.compare(password, admin.password)))
      return res.status(401).json({ message: "Invalid credentials" });

    const token = jwt.sign({ adminId: admin._id, email: admin.email }, JWT_SECRET, { expiresIn: "10m" });

    res.setHeader(
      "Set-Cookie",
      serialize("adminToken", token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "strict",
        maxAge: 60 * 10,
        path: "/",
      })
    );

    res.status(200).json({ message: "Admin login successful" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
}


============ FILE: pages/api/admin/lists/upload.ts ============
import { NextApiRequest, NextApiResponse } from "next";
import formidable, { File as FormidableFile, IncomingForm } from "formidable";
// import { verifyAdminAuth } from "../../../../lib/verifyAdminAuth";
import fs from "fs";
import pinataSDK from "@pinata/sdk";
const pinata = new pinataSDK("90b3ccabe543388210da", "7c3eaed89e56b0ebebd4a793d42a6dfd89626a7469aec2087e863bf2f4103380");

export const config = {
  api: {
    bodyParser: false,
  },
};

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") {
    res.status(405).json({ success: false, message: "Method not allowed" });
    return;
  }

  const form = new IncomingForm({ keepExtensions: true });

  form.parse(req, async (err, fields, files) => {
    if (err) {
      console.error("Formidable parse error:", err);
      res.status(500).json({ success: false, message: "File parsing error" });
      return;
    }

    try {
    
      const fileKeys = Object.keys(files);
      const fileResponses: Record<string, any> = {};

      for (const key of fileKeys) {
        const fileData = files[key];
        // Handle both array or single file
        const file = Array.isArray(fileData) ? fileData[0] : fileData;
        if (file) {
          const fileStream = fs.createReadStream(file.filepath);
          
          const result = await pinata.pinFileToIPFS(fileStream, {
            pinataMetadata: { name: file.originalFilename || "uploaded_file" },
          });

          fileResponses[key] = {
            fileName: file.originalFilename,
            ipfsHash: result.IpfsHash,
          };
        } else {
          console.error(`File is undefined for key: ${key}`);
        }
      }

      res.status(200).json({ success: true, data: fileResponses });
    } catch (error) {
      console.error("Pinata Upload Error:", error);
       if (!res.headersSent)
      res.status(500).json({ success: false, message: "Server error" });
  
    }
  });
}


============ FILE: pages/api/admin/processVoters.ts ============
// pages/api/admin/processVoters.ts

import type { NextApiRequest, NextApiResponse } from "next";
import axios from "axios";
import mongoose from "mongoose";
import Voter from "../../../models/Voter";
import connectToDatabase from "../../../lib/mongodb";
import bcrypt from "bcryptjs";
import nodemailer from "nodemailer";
import fs from "fs";
import path from "path";
import { votingAddress } from "../../../app/artifacts/votingArtifact";
const Web3 = require("web3");

// 1. Random password generator
const generatePassword = (length = 8) => {
  const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  return Array.from({ length }, () => chars[Math.floor(Math.random() * chars.length)]).join("");
};

// 2. Nodemailer setup
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: "prproject201@gmail.com",
    pass: "hzhy qwmk rqvw jzid", // 🔒 consider using env vars
  },
  socketTimeout: 10000,
});

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") {
    return res.status(405).json({ success: false, message: "Only POST method allowed" });
  }

  const { ipfsHash } = req.body;
  if (!ipfsHash) {
    return res.status(400).json({ success: false, message: "Missing IPFS hash" });
  }

  try {
    await connectToDatabase();

    // Initialize web3
    const web3 = new Web3("http://127.0.0.1:8545");
    const accounts = await web3.eth.getAccounts();
    const admin =accounts[0];

    // Load ABI + address
    const artifactPath = path.resolve(process.cwd(), "artifacts/contracts/Voting.sol/Voting.json");
    const artifact = JSON.parse(fs.readFileSync(artifactPath, "utf8"));

    // Replace with actual deployed address
    const contractAddress =votingAddress;

    const voting = new web3.eth.Contract(artifact.abi, contractAddress);

    // Get voter list from IPFS
    const ipfsUrl = `https://gateway.pinata.cloud/ipfs/${ipfsHash}`;
    const { data: voters } = await axios.get(ipfsUrl);

    const results = [];

    for (let i = 0; i < voters.length; i++) {
      const voter = voters[i];
      const password = generatePassword();
      const passwordHash = await bcrypt.hash(password, 10);
      const voterAccount = accounts[i + 1]; // start from index 1 to skip admin

      // Register on blockchain
      await voting.methods
  .registerVoter(voter.name, voter.phoneNumber, voter.rollNumber)
  .send({ from:voterAccount , gas: 1000000 }); 


      // Save in DB
      const voterDoc = new Voter({
        rollNumber: voter.rollNumber,
        name: voter.name,
        email: voter.email,
        phoneNumber: voter.phoneNumber,
        Ethaccount: voterAccount,
        mustChangePassword: true,
        passwordHash,
        ipfsHash,
      });
      await voterDoc.save();

      // Send email
      await transporter.sendMail({
        from: process.env.EMAIL_USER || "prproject201@gmail.com",
        to: voter.email,
        subject: "Your Voting Credentials",
        html: `<p>Hello ${voter.name},</p><p>Your system-generated password is: <strong>${password}</strong></p><p>Keep this confidential.</p>`,
      });

      results.push({ email: voter.email, status: "success" });
    }

    res.status(200).json({ success: true, results });
  } catch (error) {
    console.error("Process error:", error);
    res.status(500).json({ success: false, message: "Something went wrong", error });
  }
}


============ FILE: pages/api/admin/logout-admin.ts ============
import { serialize } from "cookie";

import type { NextApiRequest, NextApiResponse } from "next";

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // Clear the cookie
  if (req.method !== "POST") {
  return res.status(405).json({ message: "Method Not Allowed" });
}
  res.setHeader(
    "Set-Cookie",
    serialize("adminToken", "", {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      path: "/",
      maxAge: 0, // Set to 0 to delete the cookie
    })
  );

  res.status(200).json({ success: true, message: "Logged out" });
}


============ FILE: pages/api/admin/addAdmin.js ============
const connectToDatabase = require('../../../lib/mongodb').default;
const bcrypt = require('bcryptjs');
const Admin = require('../../../models/Admin').default;

const email = process.argv[2];
const plainPassword = process.argv[3];

if (!email || !plainPassword) {
  console.error('Usage: node addAdmin.js <email> <password>');
  process.exit(1);
}

async function addAdmin(email, plainPassword) {
  try {
    await connectToDatabase();

    const existingAdmin = await Admin.findOne({ email });
    if (existingAdmin) {
      console.log('Admin already exists with this email.');
      process.exit(0);
    }

    const hashedPassword = await bcrypt.hash(plainPassword, 10);
    const newAdmin = new Admin({ email, password: hashedPassword });

    await newAdmin.save();
    console.log('Admin added successfully.');
  } catch (err) {
    console.error('Error adding admin:', err);
    process.exit(1);
  } finally {
    process.exit(0);
  }
}

addAdmin(email, plainPassword);


============ FILE: pages/api/admin/getCandidates.ts ============
import type { NextApiRequest, NextApiResponse } from "next";
import axios from "axios";
import dbConnect from "../../../lib/mongodb";
import IpfsHash from "../../../models/IpfsHash";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    await dbConnect();

    const latest = await IpfsHash.findOne({ type: "candidates" }).sort({ uploadedAt: -1 });
 if (!latest) {
      return res.status(404).json({ success: false, message: "No candidate hash found" });
    }
  try {
    const url = `https://gateway.pinata.cloud/ipfs/${latest.hash}`;
    const { data: candidates } = await axios.get(url);

    if (!Array.isArray(candidates) || candidates.length === 0) {
      return res.status(400).json({ success: false, message: "No valid candidate data found" });
    }

    res.status(200).json({ success: true, candidates });
  } catch (error) {
    console.error("❌ Failed to fetch candidates from IPFS:", error);
    res.status(500).json({ success: false, message: "Error fetching candidates from IPFS" });
  }
}


============ FILE: pages/api/admin/logout-voter.ts ============
import { serialize } from "cookie";

import type { NextApiRequest, NextApiResponse } from "next";

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // Clear the cookie
  if (req.method !== "POST") {
  return res.status(405).json({ message: "Method Not Allowed" });
}
  res.setHeader(
    "Set-Cookie",
    serialize("voterToken", "", {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      path: "/",
      maxAge: 0, // Set to 0 to delete the cookie
    })
  );

  res.status(200).json({ success: true, message: "Logged out" });
}


============ FILE: pages/api/admin/signin.ts ============
import connectToDatabase from "../../../lib/mongodb";
import Voter from "../../../models/Voter";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import { serialize } from "cookie";

const JWT_SECRET ="All Is Well" ;

import type { NextApiRequest, NextApiResponse } from "next";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") {
    return res.status(405).json({ success: false, message: "Method not allowed" });
  }

  try {
    await connectToDatabase();

    const { email, password } = req.body;
    const voter = await Voter.findOne({ email });

    if (!voter) {
      return res.status(401).json({ success: false, message: "Invalid email or password" });
    }
    // ✅ Check if password matches
    const isPasswordValid = await bcrypt.compare(password, voter.passwordHash);

    if (!isPasswordValid) {

      return res.status(401).json({ success: false, message: "Invalid email or password" });
    }

    // ✅ Generate JWT token
    const token = jwt.sign({ id: voter._id, email: voter.email, accountNumber: voter.Ethaccount, }, JWT_SECRET, {
      expiresIn: "10m", // Token valid for 10 minutes
      algorithm: "HS256", // Use HS256 algorithm
    });

    // ✅ Set cookie with JWT
   res.setHeader(
  "Set-Cookie",
  serialize("voterToken", token, {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "strict",
    maxAge: 60 *10, // 10 minutes
    path: "/",
  })
);


    return res.status(200).json({ success: true,mustChangePassword: voter.mustChangePassword, voterId: voter._id,message: "Signin successful" });
  } catch (error) {
    console.error("signin error:", error);
    return res.status(500).json({ success: false, message: "Server error" });
  }
}


============ FILE: pages/api/admin/me.ts ============
import jwt from "jsonwebtoken";
import { parse } from "cookie"; 
import connectToDatabase from "@/lib/mongodb";
import Voter from "@/models/Voter";
const JWT_SECRET = "All Is Well";

import type { NextApiRequest, NextApiResponse } from "next";
interface JwtPayload {
  adminId: string;
  name: string;
  email: string;
  phoneNumber?: number;
  accountNumber?: string;
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const { voterToken } = parse(req.headers.cookie || "");
    

  if (!voterToken) {
    return res.status(401).json({ authenticated: false });
  }

  try {
    const decoded = jwt.verify(voterToken, JWT_SECRET) as JwtPayload;;
      await connectToDatabase();
    const voter = await Voter.findOne({ email: decoded.email });

    if (!voter) return res.status(401).json({ authenticated: false });
    return res.status(200).json({  authenticated: true,
      name: voter.name,phoneNumber: voter.phoneNumber,
      accountNumber: voter.Ethaccount, user: decoded });
  } catch (err) {
    return res.status(401).json({ authenticated: false });
  }
}


============ FILE: pages/api/admin/processCandidates.ts ============
import type { NextApiRequest, NextApiResponse } from "next";
import axios from "axios";
import dbConnect from "../../../lib/mongodb";
import IpfsHash from "../../../models/IpfsHash";
import fs from "fs";
import path from "path";
import { votingAddress } from "../../../app/artifacts/votingArtifact";
const Web3 = require("web3");

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") {
    return res.status(405).json({ success: false, message: "Only POST method allowed" });
  }

  try {
    const { ipfsHash } = req.body;

    if (!ipfsHash) {
      return res.status(400).json({ success: false, message: "Missing IPFS hash" });
    }

    await dbConnect();

    await IpfsHash.create({
      hash: ipfsHash,
      type: "candidates",
    });

    const web3 = new Web3("http://127.0.0.1:8545");
    const accounts = await web3.eth.getAccounts();
    const admin = accounts[0];
    console.log("Admin account:", admin);

    // Load Hardhat-generated ABI
    const artifactPath = path.resolve(process.cwd(), "artifacts/contracts/Voting.sol/Voting.json");
    const artifact = JSON.parse(fs.readFileSync(artifactPath, "utf8"));

    // Replace with deployed contract address
    const contractAddress =votingAddress ;
    const voting = new web3.eth.Contract(artifact.abi, contractAddress);

    // Get candidates from IPFS
    const ipfsUrl = `https://gateway.pinata.cloud/ipfs/${ipfsHash}`;
    const { data: candidates } = await axios.get(ipfsUrl);

    if (!Array.isArray(candidates) || candidates.length === 0) {
      return res.status(400).json({ success: false, message: "Invalid or empty candidates data" });
    }

    // Set election and start
    await voting.methods
      .setElectionDetails(
        "Alice Johnson",              // adminName
        "test@gmail.com",             // adminEmail
        "Chief Electoral Officer",    // adminTitle
        "2025 Student Council Polls", // electionTitle
        "ABC Institute of Technology",// organizationTitle
        4                             // maxVotes
      )
      .send({ from: admin , gas: 1000000});

    await voting.methods.startElection(5).send({ from: admin });

    for (const candidate of candidates) {
      console.log("Candidate from IPFS:", candidate);
console.log("Name length:", candidate.name.length);
console.log("Agenda length:", candidate.agenda.length);
      const tx = await voting.methods
        .addCandidate(candidate.name, candidate.agenda)
        .send({ from: admin, gas: 1000000 });

      console.log(`Candidate added: ${candidate.name}, Tx Hash: ${tx.transactionHash}`);
    }

    return res.status(200).json({ success: true, message: "Candidates processed successfully" });

  } catch (error) {
    console.error("Error processing candidates:", error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    return res.status(500).json({ success: false, message: "Internal server error", error: errorMessage });
  }
}


============ FILE: pages/api/csp-report.ts ============
// pages/api/csp-report.ts
import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  // If you want, uncomment to log the report:
  // console.log('CSP report:', req.body)
  res.status(200).json({ ok: true })
}


============ FILE: components/ui/signHeader.tsx ============
"use client";

import Link from "next/link";
import Logo from "./logo";

export default function SignHeader() {
  return (
    <header className="z-30 mt-2 w-full md:mt-5">
      <div className="mx-auto max-w-6xl px-4 sm:px-6">
        <div className="relative flex h-14 items-center justify-between gap-3 rounded-2xl bg-gray-900/90 px-3 before:pointer-events-none before:absolute before:inset-0 before:rounded-[inherit] before:border before:border-transparent before:[background:linear-gradient(to_right,theme(colors.gray.800),theme(colors.gray.700),theme(colors.gray.800))_border-box] before:[mask-composite:exclude_!important] before:[mask:linear-gradient(white_0_0)_padding-box,_linear-gradient(white_0_0)] after:absolute after:inset-0 after:-z-10 after:backdrop-blur-sm">
          {/* Site branding */}
          <div className="flex flex-1 items-center">
            <Logo />
          </div>

          {/* Desktop sign in links */}
          
        </div>
      </div>
    </header>
  );
}


============ FILE: components/ui/VoterHeader.tsx ============
// components/AdminHeader.tsx
"use client";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import axios from "axios";
import Logo from "./logo";

export default function AdminHeader() {
  const [loggedIn, setLoggedIn] = useState(false);
  const router = useRouter();

  useEffect(() => {
    axios
      .get("/api/admin/me")
      .then((res) => {
        setLoggedIn(res.data.authenticated);
      })
      .catch(() => setLoggedIn(false));
  }, []);

  const handleLogout = async () => {
    try {
      await axios.post("/api/admin/logout-voter");
      router.push("/");
    } catch (error) {
      console.error("Logout error:", error);
    }
  };



  return (
    <header className="z-30 mt-2 w-full md:mt-5">
      <div className="mx-auto max-w-6xl px-4 sm:px-6">
        <div className="relative flex h-14 items-center justify-between gap-3 rounded-2xl bg-gray-900/90 px-3 before:pointer-events-none before:absolute before:inset-0 before:rounded-[inherit] before:border before:border-transparent before:[background:linear-gradient(to_right,theme(colors.gray.800),theme(colors.gray.700),theme(colors.gray.800))_border-box] before:[mask-composite:exclude_!important] before:[mask:linear-gradient(white_0_0)_padding-box,_linear-gradient(white_0_0)] after:absolute after:inset-0 after:-z-10 after:backdrop-blur-sm">
          {/* Site branding */}
          <div className="flex flex-1 items-center">
            <Logo />
          </div>

          {/* Desktop sign in links */}
          <ul className="flex flex-1 items-center justify-end gap-3">
            <li>
           <button
              type="button"
              onClick={handleLogout}
              className="btn w-full bg-indigo-500 text-white hover:bg-indigo-700"
            >
              Logout
            </button>
            </li>
          </ul>
        </div>
      </div>
    </header>
  );
}

    
      
 


============ FILE: components/ui/ToastProvider.tsx ============
// components/ToastProvider.tsx
"use client";

import { useEffect } from "react";
import { usePathname } from "next/navigation";
import { Toaster, toast } from "react-hot-toast";

export default function ToastProvider() {
  const pathname = usePathname();

  // Dismiss all toasts on route change
  useEffect(() => {
    toast.dismiss();
  }, [pathname]);

  return (
    <Toaster
      position="top-center"
      toastOptions={{
        duration: 4000,
        style: {
          background: "#1f2937", // gray-950
          color: "#e0e7ff", // indigo-100
          border: "1px solid #6366f1", // indigo-500
          padding: "14px 18px",
          borderRadius: "10px",
          fontSize: "14px",
          fontWeight: 500,
          boxShadow: "0 4px 20px rgba(0,0,0,0.25)",
          backdropFilter: "blur(6px)",
        },
        success: {
          iconTheme: {
            primary: "#4f46e5", // indigo-600
            secondary: "#e0e7ff",
          },
        },
        error: {
          iconTheme: {
            primary: "#ef4444",
            secondary: "#ffe4e6",
          },
        },
      }}
    />
  );
}


============ FILE: components/ui/FullScreenLoader.tsx ============
"use client";
import React from "react";
import { Loader2 } from "lucide-react";

export default function FullScreenLoader({ message }: { message?: string }) {
  return (
    <div className="fixed inset-0 bg-black/70 z-50 flex flex-col items-center justify-center space-y-4">
      <Loader2 className="h-12 w-12 text-indigo-400 animate-spin" />
      <p className="text-white text-lg">{message || "Loading..."}</p>
    </div>
  );
}


============ FILE: components/ui/footer.tsx ============
import Logo from "./logo";
import Image from "next/image";
import FooterIllustration from "@/public/images/footer-illustration.svg";

export default function Footer() {
  return (
    <footer>
      <div className="relative mx-auto max-w-6xl px-4 sm:px-6">
        {/* Footer illustration */}
        <div
          className="pointer-events-none absolute bottom-0 left-1/2 -z-10 -translate-x-1/2"
          aria-hidden="true"
        >
          <Image
            className="max-w-none"
            src={FooterIllustration}
            width={1076}
            height={378}
            alt="Footer illustration"
          />
        </div>
        <div className="grid grid-cols-2 justify-between gap-12 py-8 sm:grid-rows-[auto_auto] md:grid-cols-4 md:grid-rows-[auto_auto] md:py-12 lg:grid-cols-[repeat(4,minmax(0,140px))_1fr] lg:grid-rows-1 xl:gap-20">
          {/* 1st block */}
          <div className="space-y-2">
            <h3 className="text-sm font-medium text-gray-200">Product</h3>
            <ul className="space-y-2 text-sm">
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Features
                </a>
              </li>
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Integrations
                </a>
              </li>
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Pricing &amp; Plans
                </a>
              </li>
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Changelog
                </a>
              </li>
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Our method
                </a>
              </li>
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  User policy
                </a>
              </li>
            </ul>
          </div>
          {/* 2nd block */}
          <div className="space-y-2">
            <h3 className="text-sm font-medium text-gray-200">Company</h3>
            <ul className="space-y-2 text-sm">
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  About us
                </a>
              </li>
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Diversity &amp; Inclusion
                </a>
              </li>
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Blog
                </a>
              </li>
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Careers
                </a>
              </li>
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Financial statements
                </a>
              </li>
            </ul>
          </div>
          {/* 3rd block */}
          <div className="space-y-2">
            <h3 className="text-sm font-medium text-gray-200">Resources</h3>
            <ul className="space-y-2 text-sm">
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Community
                </a>
              </li>
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Terms of service
                </a>
              </li>
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Report a vulnerability
                </a>
              </li>
            </ul>
          </div>
          {/* 4th block */}
          <div className="space-y-2">
            <h3 className="text-sm font-medium text-gray-200">
              Content Library
            </h3>
            <ul className="space-y-2 text-sm">
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Templates
                </a>
              </li>
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Tutorials
                </a>
              </li>
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Knowledge base
                </a>
              </li>
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Learn
                </a>
              </li>
              <li>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Cookie manager
                </a>
              </li>
            </ul>
          </div>
          {/* 5th block */}
          <div className="col-span-2 md:col-span-4 lg:col-span-1 lg:text-right">
            <div className="mb-3">
              <Logo />
            </div>
            <div className="text-sm">
              <p className="mb-3 text-indigo-200/65">
                © Cruip.com
                <span className="text-gray-700"> · </span>
                <a
                  className="text-indigo-200/65 transition hover:text-indigo-500"
                  href="#0"
                >
                  Terms
                </a>
              </p>
              <ul className="inline-flex gap-1">
                <li>
                  <a
                    className="flex items-center justify-center text-indigo-500 transition hover:text-indigo-400"
                    href="#0"
                    aria-label="Twitter"
                  >
                    <svg
                      className="h-8 w-8 fill-current"
                      viewBox="0 0 32 32"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path d="m13.063 9 3.495 4.475L20.601 9h2.454l-5.359 5.931L24 23h-4.938l-3.866-4.893L10.771 23H8.316l5.735-6.342L8 9h5.063Zm-.74 1.347h-1.457l8.875 11.232h1.36l-8.778-11.232Z" />
                    </svg>
                  </a>
                </li>
                <li>
                  <a
                    className="flex items-center justify-center text-indigo-500 transition hover:text-indigo-400"
                    href="#0"
                    aria-label="Medium"
                  >
                    <svg
                      className="h-8 w-8 fill-current"
                      viewBox="0 0 32 32"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path d="M23 8H9a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1Zm-1.708 3.791-.858.823a.251.251 0 0 0-.1.241V18.9a.251.251 0 0 0 .1.241l.838.823v.181h-4.215v-.181l.868-.843c.085-.085.085-.11.085-.241v-4.887l-2.41 6.131h-.329l-2.81-6.13V18.1a.567.567 0 0 0 .156.472l1.129 1.37v.181h-3.2v-.181l1.129-1.37a.547.547 0 0 0 .146-.472v-4.749a.416.416 0 0 0-.138-.351l-1-1.209v-.181H13.8l2.4 5.283 2.122-5.283h2.971l-.001.181Z" />
                    </svg>
                  </a>
                </li>
                <li>
                  <a
                    className="flex items-center justify-center text-indigo-500 transition hover:text-indigo-400"
                    href="#0"
                    aria-label="Github"
                  >
                    <svg
                      className="h-8 w-8 fill-current"
                      viewBox="0 0 32 32"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path d="M16 8.2c-4.4 0-8 3.6-8 8 0 3.5 2.3 6.5 5.5 7.6.4.1.5-.2.5-.4V22c-2.2.5-2.7-1-2.7-1-.4-.9-.9-1.2-.9-1.2-.7-.5.1-.5.1-.5.8.1 1.2.8 1.2.8.7 1.3 1.9.9 2.3.7.1-.5.3-.9.5-1.1-1.8-.2-3.6-.9-3.6-4 0-.9.3-1.6.8-2.1-.1-.2-.4-1 .1-2.1 0 0 .7-.2 2.2.8.6-.2 1.3-.3 2-.3s1.4.1 2 .3c1.5-1 2.2-.8 2.2-.8.4 1.1.2 1.9.1 2.1.5.6.8 1.3.8 2.1 0 3.1-1.9 3.7-3.7 3.9.3.4.6.9.6 1.6v2.2c0 .2.1.5.6.4 3.2-1.1 5.5-4.1 5.5-7.6-.1-4.4-3.7-8-8.1-8z" />
                    </svg>
                  </a>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
}


============ FILE: components/ui/AdminHeader.tsx ============
// components/AdminHeader.tsx
"use client";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import axios from "axios";
import Logo from "./logo";

export default function AdminHeader() {
  const [loggedIn, setLoggedIn] = useState(false);
  const router = useRouter();

  useEffect(() => {
    axios
      .get("/api/admin/me")
      .then((res) => {
        setLoggedIn(res.data.authenticated);
      })
      .catch(() => setLoggedIn(false));
  }, []);

  const handleLogout = async () => {
    try {
      await axios.post("/api/admin/logout-admin");
      router.push("/");
    } catch (error) {
      console.error("Logout error:", error);
    }
  };



  return (
    <header className="z-30 mt-2 w-full md:mt-5">
      <div className="mx-auto max-w-6xl px-4 sm:px-6">
        <div className="relative flex h-14 items-center justify-between gap-3 rounded-2xl bg-gray-900/90 px-3 before:pointer-events-none before:absolute before:inset-0 before:rounded-[inherit] before:border before:border-transparent before:[background:linear-gradient(to_right,theme(colors.gray.800),theme(colors.gray.700),theme(colors.gray.800))_border-box] before:[mask-composite:exclude_!important] before:[mask:linear-gradient(white_0_0)_padding-box,_linear-gradient(white_0_0)] after:absolute after:inset-0 after:-z-10 after:backdrop-blur-sm">
          {/* Site branding */}
          <div className="flex flex-1 items-center">
            <Logo />
          </div>

          {/* Desktop sign in links */}
          <ul className="flex flex-1 items-center justify-end gap-3">
            <li>
           <button
              type="button"
              onClick={handleLogout}
              className="btn w-full bg-indigo-500 text-white hover:bg-indigo-700"
            >
              Logout
            </button>
            </li>
          </ul>
        </div>
      </div>
    </header>
  );
}

    
      
 


============ FILE: components/ui/logo.tsx ============
import Link from "next/link";
import Image from "next/image";
import logo from "@/public/images/logo.svg";

export default function Logo() {
  return (
    <Link href="/" className="inline-flex shrink-0" aria-label="Cruip">
      <Image src={logo} alt="Cruip Logo" width={32} height={32} />
    </Link>
  );
}


============ FILE: components/ui/header.tsx ============
"use client";

import Link from "next/link";
import Logo from "./logo";

export default function Header() {
  return (
    <header className="z-30 mt-2 w-full md:mt-5">
      <div className="mx-auto max-w-6xl px-4 sm:px-6">
        <div className="relative flex h-14 items-center justify-between gap-3 rounded-2xl bg-gray-900/90 px-3 before:pointer-events-none before:absolute before:inset-0 before:rounded-[inherit] before:border before:border-transparent before:[background:linear-gradient(to_right,theme(colors.gray.800),theme(colors.gray.700),theme(colors.gray.800))_border-box] before:[mask-composite:exclude_!important] before:[mask:linear-gradient(white_0_0)_padding-box,_linear-gradient(white_0_0)] after:absolute after:inset-0 after:-z-10 after:backdrop-blur-sm">
          {/* Site branding */}
          <div className="flex flex-1 items-center">
            <Logo />
          </div>

          {/* Desktop sign in links */}
          <ul className="flex flex-1 items-center justify-end gap-3">
            <li>
              <Link
                href="/signin"
                className="btn-sm bg-gradient-to-t from-indigo-600 to-indigo-500 bg-[length:100%_100%] bg-[bottom] py-[5px] text-white shadow-[inset_0px_1px_0px_0px_theme(colors.white/.16)] hover:bg-[length:100%_150%]"
        
              >
                Sign In
              </Link>
            </li>
          
            <li>
              <Link
                href="/admin"
                className="btn-sm bg-gradient-to-t from-indigo-600 to-indigo-500 bg-[length:100%_100%] bg-[bottom] py-[5px] text-white shadow-[inset_0px_1px_0px_0px_theme(colors.white/.16)] hover:bg-[length:100%_150%]"
              >
                Admin
              </Link>
            </li>
          </ul>
        </div>
      </div>
    </header>
  );
}


============ FILE: components/workflows.tsx ============
"use client";

import React from "react";
import { useRouter } from "next/navigation";
import Image from "next/image";
import WorflowImg01 from "@/public/images/workflow-01.png";
import WorflowImg02 from "@/public/images/workflow-02.png";
import WorflowImg03 from "@/public/images/workflow-03.png";
import Header from "./ui/header";
import Spotlight from "@/components/spotlight";
// import toast from "react-hot-toast";
import { showToast } from "../pages/api/admin/showToast";

export default function Workflows() {
  const handler = (p0: string) => {
    if (p0 === "candidates list") {
      showToast("You must be signed in to view the candidates list.", "error");
    } else if (p0 === "Vote securly!") {
      showToast("You must be signed in to vote.", "error");
    } else if (p0 === "Results!") {
      showToast("You must be signed in to view the results.", "error");
    }
  };

  return (
    <section>
      <div className="mx-auto max-w-6xl px-4 sm:px-6">
        <div className="pb-12 md:pb-20">
          <Header />
          <div className="mx-auto max-w-3xl pb-12 text-center md:pb-20">
            <div className="inline-flex items-center gap-3 pb-3 before:h-px before:w-8 before:bg-gradient-to-r before:from-transparent before:to-indigo-200/50 after:h-px after:w-8 after:bg-gradient-to-l after:from-transparent after:to-indigo-200/50">
              <span className="inline-flex bg-gradient-to-r from-indigo-500 to-indigo-200 bg-clip-text text-transparent">
                Voting system
              </span>
            </div>
            <h2 className="animate-[gradient_6s_linear_infinite] bg-[linear-gradient(to_right,theme(colors.gray.200),theme(colors.indigo.200),theme(colors.gray.50),theme(colors.indigo.300),theme(colors.gray.200))] bg-[length:200%_auto] bg-clip-text pb-4 font-nacelle text-3xl font-semibold text-transparent md:text-4xl">
              Welcome!
            </h2>
            <p className="text-lg text-indigo-200/65">
              Hi, Voters you can vote Here securly and anonymously
            </p>
          </div>
          {/* Spotlight items */}
          <Spotlight className="group mx-auto grid max-w-sm items-start gap-6 lg:max-w-none lg:grid-cols-3">
            {/* Card 1 - Candidates List */}
            <div
              onClick={() => handler("candidates list")}
              className="group/card relative h-full overflow-hidden rounded-2xl bg-gray-800 p-px cursor-pointer"
            >
              <div className="relative z-20 h-full overflow-hidden rounded-[inherit] bg-gray-950">
                <Image
                  className="inline-flex"
                  src={WorflowImg01}
                  width={350}
                  height={288}
                  alt="Workflow 01"
                />
                <div className="p-6">
                  <div className="mb-3">
                    <span className="btn-sm rounded-full bg-gray-800/40 px-2.5 py-0.5 text-xs font-normal">
                      <span className="bg-gradient-to-r from-indigo-500 to-indigo-200 bg-clip-text text-transparent">
                        Candidates list
                      </span>
                    </span>
                  </div>
                  <p className="text-indigo-200/65">
                    Here you can see the list of candidates and each of their
                    manifesto
                  </p>
                </div>
              </div>
            </div>

            {/* Card 2 - Voting Page */}
            <div
              onClick={() => handler("Vote securly!")}
              className="group/card relative h-full overflow-hidden rounded-2xl bg-gray-800 p-px cursor-pointer"
            >
              <div className="relative z-20 h-full overflow-hidden rounded-[inherit] bg-gray-950">
                <Image
                  className="inline-flex"
                  src={WorflowImg02}
                  width={350}
                  height={288}
                  alt="Workflow 02"
                />
                <div className="p-6">
                  <div className="mb-3">
                    <span className="btn-sm rounded-full bg-gray-800/40 px-2.5 py-0.5 text-xs font-normal">
                      <span className="bg-gradient-to-r from-indigo-500 to-indigo-200 bg-clip-text text-transparent">
                        Vote securly!
                      </span>
                    </span>
                  </div>
                  <p className="text-indigo-200/65">
                    Give your vote to your favorite candidate Here
                  </p>
                </div>
              </div>
            </div>

            {/* Card 3 - Results Page */}
            <div
              onClick={() => handler("Results!")}
              className="group/card relative h-full overflow-hidden rounded-2xl bg-gray-800 p-px cursor-pointer"
            >
              <div className="relative z-20 h-full overflow-hidden rounded-[inherit] bg-gray-950">
                <Image
                  className="inline-flex"
                  src={WorflowImg03}
                  width={350}
                  height={288}
                  alt="Workflow 03"
                />
                <div className="p-6">
                  <div className="mb-3">
                    <span className="btn-sm rounded-full bg-gray-800/40 px-2.5 py-0.5 text-xs font-normal">
                      <span className="bg-gradient-to-r from-indigo-500 to-indigo-200 bg-clip-text text-transparent">
                        Results!
                      </span>
                    </span>
                  </div>
                  <p className="text-indigo-200/65">
                    You can see winners of the election here
                  </p>
                </div>
              </div>
            </div>
          </Spotlight>
        </div>
      </div>
    </section>
  );
}


============ FILE: components/features.tsx ============
import Image from "next/image";
import BlurredShapeGray from "@/public/images/blurred-shape-gray.svg";
import BlurredShape from "@/public/images/blurred-shape.svg";
import FeaturesImage from "@/public/images/features.png";
export default function Features() {
  return (
    <section className="relative">
      <div
        className="pointer-events-none absolute left-1/2 top-0 -z-10 -mt-20 -translate-x-1/2"
        aria-hidden="true"
      >
        <Image
          className="max-w-none"
          src={BlurredShapeGray}
          width={760}
          height={668}
          alt="Blurred shape"
        />
      </div>
      <div
        className="pointer-events-none absolute bottom-0 left-1/2 -z-10 -mb-80 -translate-x-[120%] opacity-50"
        aria-hidden="true"
      >
        <Image
          className="max-w-none"
          src={BlurredShape}
          width={760}
          height={668}
          alt="Blurred shape"
        />
      </div>
      <div className="mx-auto max-w-6xl px-4 sm:px-6">
        <div className="border-t py-12 [border-image:linear-gradient(to_right,transparent,theme(colors.slate.400/.25),transparent)1] md:py-20">
          {/* Section header */}
          <div className="mx-auto max-w-3xl pb-4 text-center md:pb-12">
            <div className="inline-flex items-center gap-3 pb-3 before:h-px before:w-8 before:bg-gradient-to-r before:from-transparent before:to-indigo-200/50 after:h-px after:w-8 after:bg-gradient-to-l after:from-transparent after:to-indigo-200/50">
              <span className="inline-flex bg-gradient-to-r from-indigo-500 to-indigo-200 bg-clip-text text-transparent">
               About us!
              </span>
            </div>
            <h2 className="animate-[gradient_6s_linear_infinite] bg-[linear-gradient(to_right,theme(colors.gray.200),theme(colors.indigo.200),theme(colors.gray.50),theme(colors.indigo.300),theme(colors.gray.200))] bg-[length:200%_auto] bg-clip-text pb-4 font-nacelle text-3xl font-semibold text-transparent md:text-4xl">
              Built for secure vote 
            </h2>
            <p className="text-lg text-indigo-200/65">
              It's a Blockchain based voting system that is secure and transparent
               you can 
              vote here anonymously and your vote will be stored in the blockchain.
            </p>
          </div>
          <div className="flex justify-center pb-4 md:pb-12" data-aos="fade-up">
            {/* <Image
              className="max-w-none"
              src={FeaturesImage}
              width={1104}
              height={384}
              alt="Features"
            /> */}
          </div>
          {/* Items */}
          <div className="mx-auto grid max-w-sm gap-12 sm:max-w-none sm:grid-cols-2 md:gap-x-14 md:gap-y-16 lg:grid-cols-3">
            <article>
              <svg
                className="mb-3 fill-indigo-500"
                xmlns="http://www.w3.org/2000/svg"
                width={24}
                height={24}
              >
                <path d="M0 0h14v17H0V0Zm2 2v13h10V2H2Z" />
                <path
                  fillOpacity=".48"
                  d="m16.295 5.393 7.528 2.034-4.436 16.412L5.87 20.185l.522-1.93 11.585 3.132 3.392-12.55-5.597-1.514.522-1.93Z"
                />
              </svg>
              <h3 className="mb-1 font-nacelle text-[1rem] font-semibold text-gray-200">
                Project Milestones
              </h3>
              <p className="text-indigo-200/65">
                Track progress across custom flows for your team. Find the right
                balance for the user, privacy and security.
              </p>
            </article>
            <article>
              <svg
                className="mb-3 fill-indigo-500"
                xmlns="http://www.w3.org/2000/svg"
                width={24}
                height={24}
              >
                <path fillOpacity=".48" d="M7 8V0H5v8h2Zm12 16v-4h-2v4h2Z" />
                <path d="M19 6H0v2h17v8H7v-6H5v8h19v-2h-5V6Z" />
              </svg>
              <h3 className="mb-1 font-nacelle text-[1rem] font-semibold text-gray-200">
                Our Team
              </h3>
              <p className="text-indigo-200/65">
               List of our team members and their roles in the project.
              </p>
            </article>
            <article>
              <svg
                className="mb-3 fill-indigo-500"
                xmlns="http://www.w3.org/2000/svg"
                width={24}
                height={24}
              >
                <path d="M23.414 6 18 .586 16.586 2l3 3H7a6 6 0 0 0-6 6h2a4 4 0 0 1 4-4h12.586l-3 3L18 11.414 23.414 6Z" />
                <path
                  fillOpacity=".48"
                  d="M13.01 12.508a2.5 2.5 0 0 0-3.502.482L1.797 23.16.203 21.952l7.71-10.17a4.5 4.5 0 1 1 7.172 5.437l-4.84 6.386-1.594-1.209 4.841-6.385a2.5 2.5 0 0 0-.482-3.503Z"
                />
              </svg>
              <h3 className="mb-1 font-nacelle text-[1rem] font-semibold text-gray-200">
               Reviews
              </h3>
              <p className="text-indigo-200/65">
                You can see the reviews of the project and the feedbacks of the users.
              </p>
            </article>
            {/* <article>
              <svg
                className="mb-3 fill-indigo-500"
                xmlns="http://www.w3.org/2000/svg"
                width={24}
                height={24}
              >
                <path
                  fillOpacity=".48"
                  d="m3.031 9.05-.593-.805 1.609-1.187.594.804a6.966 6.966 0 0 1 0 8.276l-.594.805-1.61-1.188.594-.805a4.966 4.966 0 0 0 0-5.9Z"
                />
                <path d="m7.456 6.676-.535-.845 1.69-1.07.534.844a11.944 11.944 0 0 1 0 12.789l-.535.845-1.69-1.071.536-.845a9.944 9.944 0 0 0 0-10.647Z" />
                <path
                  d="m11.888 4.35-.514-.858 1.717-1.027.513.858a16.9 16.9 0 0 1 2.4 8.677 16.9 16.9 0 0 1-2.4 8.676l-.513.859-1.717-1.028.514-.858A14.9 14.9 0 0 0 14.003 12a14.9 14.9 0 0 0-2.115-7.65Z"
                  opacity=".48"
                />
                <path d="m16.321 2-.5-.866 1.733-1 .5.866A22 22 0 0 1 21 12c0 3.852-1.017 7.636-2.948 10.97l-.502.865-1.73-1.003.501-.865A19.878 19.878 0 0 0 19 12a20 20 0 0 0-2.679-10Z" />
              </svg>
              <h3 className="mb-1 font-nacelle text-[1rem] font-semibold text-gray-200">
                Strategic Initiatives
              </h3>
              <p className="text-indigo-200/65">
                Track progress across custom flows for your team. Find the right
                balance for the user, privacy and security.
              </p>
            </article>
            <article>
              <svg
                className="mb-3 fill-indigo-500"
                xmlns="http://www.w3.org/2000/svg"
                width={24}
                height={24}
              >
                <path
                  fillOpacity=".48"
                  d="M12 8.8a3 3 0 1 0 0 6 3 3 0 0 0 0-6Zm-5 3a5 5 0 1 1 10 0 5 5 0 0 1-10 0Z"
                />
                <path d="m7.454 2.891.891-.454L7.437.655l-.891.454a12 12 0 0 0 0 21.382l.89.454.91-1.781-.892-.455a10 10 0 0 1 0-17.818ZM17.456 1.11l-.891-.454-.909 1.782.891.454a10 10 0 0 1 0 17.819l-.89.454.908 1.781.89-.454a12 12 0 0 0 0-21.382Z" />
              </svg>
              <h3 className="mb-1 font-nacelle text-[1rem] font-semibold text-gray-200">
                Flexible Workflows
              </h3>
              <p className="text-indigo-200/65">
                Track progress across custom flows for your team. Find the right
                balance for the user, privacy and security.
              </p>
            </article>
            <article>
              <svg
                className="mb-3 fill-indigo-500"
                xmlns="http://www.w3.org/2000/svg"
                width={24}
                height={24}
              >
                <path
                  fillOpacity=".48"
                  d="M19 8h5v2h-5V8Zm-4 5h9v2h-9v-2Zm9 5H11v2h13v-2Z"
                />
                <path d="M19.406 3.844 6.083 20.497.586 15 2 13.586l3.917 3.917L17.844 2.595l1.562 1.25Z" />
              </svg>
              <h3 className="mb-1 font-nacelle text-[1rem] font-semibold text-gray-200">
                Unified Timeline
              </h3>
              <p className="text-indigo-200/65">
                Track progress across custom flows for your team. Find the right
                balance for the user, privacy and security.
              </p>
            </article> */}
          </div>
        </div>
      </div>
    </section>
  );
}


============ FILE: components/page-illustration.tsx ============
import Image from "next/image";
import Illustration from "@/public/images/page-illustration.svg";
import BlurredShapeGray from "@/public/images/blurred-shape-gray.svg";
import BlurredShape from "@/public/images/blurred-shape.svg";

export default function PageIllustration({
  multiple = false,
}: {
  multiple?: boolean;
}) {
  return (
    <>
      <div
        className="pointer-events-none absolute left-1/2 top-0 -z-10 -translate-x-1/4"
        aria-hidden="true"
      >
        <Image
          className="max-w-none"
          src={Illustration}
          width={846}
          height={594}
          alt="Page illustration"
        />
      </div>
      {multiple && (
        <>
          <div
            className="pointer-events-none absolute left-1/2 top-[400px] -z-10 -mt-20 -translate-x-full opacity-50"
            aria-hidden="true"
          >
            <Image
              className="max-w-none"
              src={BlurredShapeGray}
              width={760}
              height={668}
              alt="Blurred shape"
            />
          </div>
          <div
            className="pointer-events-none absolute left-1/2 top-[440px] -z-10 -translate-x-1/3"
            aria-hidden="true"
          >
            <Image
              className="max-w-none"
              src={BlurredShape}
              width={760}
              height={668}
              alt="Blurred shape"
            />
          </div>
        </>
      )}
    </>
  );
}


============ FILE: components/cta.tsx ============
import Image from "next/image";
import BlurredShape from "@/public/images/blurred-shape.svg";

export default function Cta() {
  return (
    <section className="relative overflow-hidden">
      <div
        className="pointer-events-none absolute bottom-0 left-1/2 -z-10 -mb-24 ml-20 -translate-x-1/2"
        aria-hidden="true"
      >
        <Image
          className="max-w-none"
          src={BlurredShape}
          width={760}
          height={668}
          alt="Blurred shape"
        />
      </div>
      <div className="max-w6xl mx-auto px-4 sm:px-6">
        <div className="bg-gradient-to-r from-transparent via-gray-800/50 py-12 md:py-20">
          <div className="mx-auto max-w-3xl text-center">
            <h2
              className="animate-[gradient_6s_linear_infinite] bg-[linear-gradient(to_right,theme(colors.gray.200),theme(colors.indigo.200),theme(colors.gray.50),theme(colors.indigo.300),theme(colors.gray.200))] bg-[length:200%_auto] bg-clip-text pb-8 font-nacelle text-3xl font-semibold text-transparent md:text-4xl"
              data-aos="fade-up"
            >
              Join Our Secure and Transparent platform
            </h2>
            <div className="mx-auto max-w-xs sm:flex sm:max-w-none sm:justify-center">
              <div data-aos="fade-up" data-aos-delay={400}>
                <a
                  className="btn group mb-4 w-full bg-gradient-to-t from-indigo-600 to-indigo-500 bg-[length:100%_100%] bg-[bottom] text-white shadow-[inset_0px_1px_0px_0px_theme(colors.white/.16)] hover:bg-[length:100%_150%] sm:mb-0 sm:w-auto"
                  href="#0"
                >
                  <span className="relative inline-flex items-center">
                    Start Building
                    <span className="ml-1 tracking-normal text-white/50 transition-transform group-hover:translate-x-0.5">
                      -&gt;
                    </span>
                  </span>
                </a>
              </div>
              <div data-aos="fade-up" data-aos-delay={600}>
                <a
                  className="btn relative w-full bg-gradient-to-b from-gray-800 to-gray-800/60 bg-[length:100%_100%] bg-[bottom] text-gray-300 before:pointer-events-none before:absolute before:inset-0 before:rounded-[inherit] before:border before:border-transparent before:[background:linear-gradient(to_right,theme(colors.gray.800),theme(colors.gray.700),theme(colors.gray.800))_border-box] before:[mask-composite:exclude_!important] before:[mask:linear-gradient(white_0_0)_padding-box,_linear-gradient(white_0_0)] hover:bg-[length:100%_150%] sm:ml-4 sm:w-auto"
                  href="#0"
                >
                  Schedule Demo
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}


============ FILE: components/spotlight.tsx ============
"use client";

import React, { useRef, useState, useEffect } from "react";
import useMousePosition from "@/utils/useMousePosition";

type SpotlightProps = {
  children: React.ReactNode;
  className?: string;
};

export default function Spotlight({
  children,
  className = "",
}: SpotlightProps) {
  const containerRef = useRef<HTMLDivElement>(null);
  const mousePosition = useMousePosition();
  const mouse = useRef<{ x: number; y: number }>({ x: 0, y: 0 });
  const containerSize = useRef<{ w: number; h: number }>({ w: 0, h: 0 });
  const [boxes, setBoxes] = useState<Array<HTMLElement>>([]);

  useEffect(() => {
    containerRef.current &&
      setBoxes(
        Array.from(containerRef.current.children).map(
          (el) => el as HTMLElement,
        ),
      );
  }, []);

  useEffect(() => {
    initContainer();
    window.addEventListener("resize", initContainer);

    return () => {
      window.removeEventListener("resize", initContainer);
    };
  }, [boxes]);

  useEffect(() => {
    onMouseMove();
  }, [mousePosition]);

  const initContainer = () => {
    if (containerRef.current) {
      containerSize.current.w = containerRef.current.offsetWidth;
      containerSize.current.h = containerRef.current.offsetHeight;
    }
  };

  const onMouseMove = () => {
    if (containerRef.current) {
      const rect = containerRef.current.getBoundingClientRect();
      const { w, h } = containerSize.current;
      const x = mousePosition.x - rect.left;
      const y = mousePosition.y - rect.top;
      const inside = x < w && x > 0 && y < h && y > 0;
      if (inside) {
        mouse.current.x = x;
        mouse.current.y = y;
        boxes.forEach((box) => {
          const boxX =
            -(box.getBoundingClientRect().left - rect.left) + mouse.current.x;
          const boxY =
            -(box.getBoundingClientRect().top - rect.top) + mouse.current.y;
          box.style.setProperty("--mouse-x", `${boxX}px`);
          box.style.setProperty("--mouse-y", `${boxY}px`);
        });
      }
    }
  };

  return (
    <div className={className} ref={containerRef}>
      {children}
    </div>
  );
}


============ FILE: lib/mongodb.js ============
import mongoose from "mongoose";

const MONGODB_URI = "mongodb://localhost:27017/decentralised-voting-system";

if (!MONGODB_URI) {
  throw new Error("Please define the MONGODB_URI environment variable");
}

let cached = global.mongoose || { conn: null, promise: null };

async function connectToDatabase() {
  if (cached.conn) return cached.conn;
  if (!cached.promise) {
    cached.promise = mongoose.connect(MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
  }
  cached.conn = await cached.promise;
  return cached.conn;
}

export default connectToDatabase;


============ FILE: models/Voter.js ============
import mongoose from "mongoose";
const VoterSchema = new mongoose.Schema({
  rollNumber: { type: String, required: true, unique: true },
  name: String,
  email: { type: String, required: true, unique: true },
  passwordHash: String,
  phoneNumber: { type: Number, required: true, unique: true },
  Ethaccount : String,
  mustChangePassword: { type: Boolean, default: true },
  ipfsHash: String,
});

export default mongoose.models.Voter || mongoose.model("Voter", VoterSchema);

//   isVerified: { type: Boolean, default: false },

============ FILE: models/IpfsHash.js ============
// models/IpfsHash.ts
import mongoose from "mongoose";

const IpfsHashSchema = new mongoose.Schema({
  hash: { type: String, required: true },
  uploadedAt: { type: Date, default: Date.now },
  type: { type: String, enum: ["candidates", "voters"], default: "candidates" },
});

export default mongoose.models.IpfsHash || mongoose.model("IpfsHash", IpfsHashSchema);


============ FILE: models/Admin.js ============
import mongoose from "mongoose";

const AdminSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  
});

export default mongoose.models.Admin || mongoose.model("Admin", AdminSchema);


============ FILE: utils/useMasonry.tsx ============
import { useEffect, useState, useRef } from "react";

const useMasonry = () => {
  const masonryContainer = useRef<HTMLDivElement | null>(null);
  const [items, setItems] = useState<ChildNode[]>([]);

  useEffect(() => {
    if (masonryContainer.current) {
      const masonryItem = Array.from(masonryContainer.current.children);
      setItems(masonryItem);
    }
  }, []);

  useEffect(() => {
    const handleMasonry = () => {
      if (!items || items.length < 1) return;
      let gapSize = 0;
      if (masonryContainer.current) {
        gapSize = parseInt(
          window
            .getComputedStyle(masonryContainer.current)
            .getPropertyValue("grid-row-gap"),
        );
      }
      items.forEach((el) => {
        if (!(el instanceof HTMLElement)) return;
        let previous = el.previousSibling;
        while (previous) {
          if (previous.nodeType === 1) {
            el.style.marginTop = "0";
            if (
              previous instanceof HTMLElement &&
              elementLeft(previous) === elementLeft(el)
            ) {
              el.style.marginTop =
                -(elementTop(el) - elementBottom(previous) - gapSize) + "px";
              break;
            }
          }
          previous = previous.previousSibling;
        }
      });
    };

    handleMasonry();
    window.addEventListener("resize", handleMasonry);
    return () => {
      window.removeEventListener("resize", handleMasonry);
    };
  }, [items]);

  const elementLeft = (el: HTMLElement) => {
    return el.getBoundingClientRect().left;
  };

  const elementTop = (el: HTMLElement) => {
    return el.getBoundingClientRect().top + window.scrollY;
  };

  const elementBottom = (el: HTMLElement) => {
    return el.getBoundingClientRect().bottom + window.scrollY;
  };

  return masonryContainer;
};

export default useMasonry;


============ FILE: utils/useMousePosition.tsx ============
import { useState, useEffect } from "react";

interface MousePosition {
  x: number;
  y: number;
}

export default function useMousePosition(): MousePosition {
  const [mousePosition, setMousePosition] = useState<MousePosition>({
    x: 0,
    y: 0,
  });

  useEffect(() => {
    const handleMouseMove = (event: MouseEvent) => {
      setMousePosition({ x: event.clientX, y: event.clientY });
    };

    window.addEventListener("mousemove", handleMouseMove);

    return () => {
      window.removeEventListener("mousemove", handleMouseMove);
    };
  }, []);

  return mousePosition;
}


============ FILE: middleware.ts ============
// middleware.ts
import { NextRequest, NextResponse } from "next/server";

// Define protected routes
const protectedRoutes = [
  "/voter",
  "/results",
  "/candidates",
  "/change-password",
  "/signinusers",
  "/admin_page",
];

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  let response: NextResponse;

  // 1. Authentication checks & possible redirects
  if (pathname === "/admin_page") {
    const isAdminLoggedIn = request.cookies.get("adminToken")?.value;
    if (!isAdminLoggedIn) {
      const url = request.nextUrl.clone();
      url.pathname = "/admin";
      response = NextResponse.redirect(url);
    }
  } else if (protectedRoutes.includes(pathname)) {
    const isVoterLoggedIn = request.cookies.get("voterToken")?.value;
    if (!isVoterLoggedIn) {
      const url = request.nextUrl.clone();
      url.pathname = "/signin";
      response = NextResponse.redirect(url);
    }
  }

  // 2. Default to a normal response if no redirect
  if (!response) {
    response = NextResponse.next();
  }

  // 3. Add Content Security Policy header:
  //    - In production: include report-uri (to /api/csp-report)
  //    - In development: simple CSP without reporting
  const csp = process.env.NODE_ENV === "production"
    ? "default-src 'self'; report-uri /api/csp-report"
    : "default-src 'self'";
  response.headers.set("Content-Security-Policy", csp);

  return response;
}

// Apply middleware only to these routes
export const config = {
  matcher: [
    "/voter",
    "/results",
    "/candidates",
    "/change-password",
    "/signinusers",
    "/admin_page",
  ],
};


============ FILE: next.config.js ============
const ContentSecurityPolicy = `
  default-src 'self';
  script-src 'self';
  style-src 'self' https://fonts.googleapis.com;
  img-src 'self' data:;
  connect-src 'self' https://api.yourdomain.com;
  font-src https://fonts.gstatic.com;
  object-src 'none';
  base-uri 'self';
  form-action 'self';
  report-uri /api/csp-report;
`;

module.exports = {
  async headers() {
    return [
      {
        source: "/(.*)", // apply to all routes
        headers: [
          {
            key: "Content-Security-Policy-Report-Only", 
            value: ContentSecurityPolicy.replace(/\n/g, ""),
          },
          {
            key: "Referrer-Policy",
            value: "strict-origin-when-cross-origin",
          },
          {
            key: "X-Content-Type-Options",
            value: "nosniff",
          },
          {
            key: "X-Frame-Options",
            value: "DENY",
          },
          {
            key: "X-XSS-Protection",
            value: "1; mode=block",
          },
        ],
      },
    ];
  },
};


============ FILE: tailwind.config.js ============
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx}",
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      fontFamily: {
        inter: ["var(--font-inter)", "sans-serif"],
        nacelle: ["var(--font-nacelle)", "sans-serif"],
      },
      fontSize: {
        xs: ["0.8125rem", { lineHeight: "1.5384" }],
        sm: ["0.875rem", { lineHeight: "1.5715" }],
        base: [
          "0.9375rem",
          { lineHeight: "1.5333", letterSpacing: "-0.0125em" },
        ],
        lg: ["1.125rem", { lineHeight: "1.5", letterSpacing: "-0.0125em" }],
        xl: ["1.25rem", { lineHeight: "1.5", letterSpacing: "-0.0125em" }],
        "2xl": ["1.5rem", { lineHeight: "1.415", letterSpacing: "-0.0268em" }],
        "3xl": [
          "1.75rem",
          { lineHeight: "1.3571", letterSpacing: "-0.0268em" },
        ],
        "4xl": ["2.5rem", { lineHeight: "1.1", letterSpacing: "-0.0268em" }],
        "5xl": ["3.5rem", { lineHeight: "1", letterSpacing: "-0.0268em" }],
        "6xl": ["4rem", { lineHeight: "1", letterSpacing: "-0.0268em" }],
        "7xl": ["4.5rem", { lineHeight: "1", letterSpacing: "-0.0268em" }],
      },
      animation: {
        shine: "shine 5s ease-in-out 500ms infinite",
      },
      keyframes: {
        shine: {
          "0%": { top: "0", transform: "scaleY(5)", opacity: "0" },
          "10%": { opacity: ".8" },
          "20%": { top: "100%", transform: "scaleY(10)", opacity: "0" },
          "100%": { top: "100%", transform: "scaleY(1)", opacity: "0" },
        },
        gradient: {
          to: { "background-position": "200% center" },
        },
      },
    },
  },
  plugins: [require("@tailwindcss/forms")],
};


============ FILE: tsconfig.json ============
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", "**/*.js",".next/types/**/*.ts", "pages/api/admin/logout.ts"],
  "exclude": ["node_modules"]
}


============ FILE: package.json ============
{
  "name": "open-pro-next",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "test": "npx hardhat test",
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@headlessui/react": "^2.1.3",
    "@openzeppelin/contracts": "^5.2.0",
    "@pinata/sdk": "^2.1.0",
    "@truffle/contract": "^4.6.31",
    "@types/node": "^22.5.0",
    "@types/react": "^18.2.42",
    "@types/react-dom": "^18.2.17",
    "aos": "^3.0.0-beta.6",
    "axios": "^1.8.4",
    "bcryptjs": "^3.0.2",
    "cookie": "^1.0.2",
    "firebase": "^11.8.1",
    "formidable": "^3.5.2",
    "framer-motion": "^12.15.0",
    "js-cookie": "^3.0.5",
    "jsonwebtoken": "^9.0.2",
    "lucide-react": "^0.511.0",
    "mongoose": "^8.13.1",
    "multer": "^1.4.5-lts.2",
    "next": "^14.0.4",
    "nodemailer": "^6.10.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hot-toast": "^2.5.2",
    "solc": "^0.8.28",
    "sonner": "^2.0.3",
    "twilio": "^5.6.1",
    "typescript": "^5.3.3"
  },
  "devDependencies": {
    "@nomicfoundation/hardhat-toolbox": "^5.0.0",
    "@nomiclabs/hardhat-web3": "^2.0.1",
    "@tailwindcss/forms": "^0.5.7",
    "@types/aos": "^3.0.7",
    "@types/formidable": "^3.4.5",
    "@types/jsonwebtoken": "^9.0.9",
    "@types/nodemailer": "^6.4.17",
    "autoprefixer": "^10.4.16",
    "dotenv": "^16.5.0",
    "hardhat": "^2.24.3",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.3.6",
    "ts-node": "^10.9.2",
    "web3": "^1.10.4"
  }
}
